【前準備】
初回実行の前準備
・環境変数の設定
　・環境変数を設定してください。※設定値の情報はGitにアップしないでください。
　　プロキシホスト名                                :HTTP_PROXY_HOST
　　プロキシポート                                  :HTTP_PROXY_PORT
　　プロキシユーザ名                                :HTTP_PROXY_USER
　　プロキシパスワード                              :HTTP_PROXY_PASSWORD
　　ツイッターの認証利用者キー                      :OAUTH_CONSUMER_KEY
　　ツイッターの認証利用者キー（シークレット）      :OAUTH_CONSUMER_SECRET
　　ツイッターの認証アクセストークン                :OAUTH_ACCESS_TOKEN
　　ツイッターの認証アクセストークン（シークレット）:OAUTH_ACCESS_TOKEN_SECRET
　　※ツイッターの認証情報の取得については、以下のサイトなどを参考にしてください。
　　　http://www.amelt.net/imc/programming/web-app/3215/
　　　（ちなみに、途中で050 IP電話以外の電話番号が必要になります。）
・会話情報の設定
　※サンプル（CallArtificialIncapacity）を流用する場合、特に作業の必要はありません。
　・対象のプロジェクト直下に、resourcesフォルダを作成してください。
　・サンプルのテキストファイルと同様に、XXTalk.txt等とTalkHistory.txtを作成し、配置してください。
・ライブラリのJarの設定
　※サンプルを流用する場合、特に作業の必要はありません。
　・以下のJarファイルをどこかに配置し、クラスパスを通してください。
　　※exe_call.batを使う場合、-cpオプションの値を適宜修正してください。
　　・ArtificialIncapacity.jar
　　・commons-io-1.3.jar
　　・commons-lang-2.3.jar
　　・jackson-core-asl-1.0.0.jar
　　・jackson-mapper-asl-1.0.0.jar
　　・twitter4j-core-4.0.3.jar

【実行方法】
実行方法
・exe.batをダブルクリック

【終了方法】
・終了するときは終了キーワード「またね」を入力する。
　※しないと履歴に残らない！
　※Jar化した際のバグで保存されないみたい・・・
　
【機能概要説明】
何かを入力すると、適当に返事をする。

【機能詳細説明】
・入力した言葉に対し、いろいろなパターンで返事をする
　以下の1～8パターンがあり、上から優先的に判断する。
　1.終了
　　終了のキーワードを入力した場合、会話を終了し、履歴をファイルに保存する。
　　履歴ファイル格納場所：resources/TalkHistory.txt

　2.３連続以上
　　３連続で同じキーワードを入力すると、
　　それに関連した内容で返事をする
　　（まだ、ランダムで返すだけしか実装してない）
　　返事内容ファイルの格納場所：resources/SameTalk.txt

　3.定型
　　言われたことに応じて、返事をする
　　例：こんちわ→こんにちは
　　返事内容ファイルの格納場所：resources/PatternTalk.txt
　　
　4.ツイッター検索
　　言われたことが含まれているツイートを検索し、
　　人気のある人のリプライ内容で返事をする。
　　※リプライ内容によっては、ちょっと下品な内容もあり。
　
　5.Wikipedia検索
　　言われたことにマッチするものがあれば、
　　その内容に関する概要を話す
　　（完全にマッチしないと表示されない。
　　　例えば、×：youtube,YOUTUBE、○：YouTube）
　　　
　6.Google検索
　　言われたことに関するグーグル検索結果最大3件の内容で返事をする。
　　
　7.Google予測変換
　　言われたことに関連する検索ワードで返事をする。

　8.ランダム
　　適当に返事をする。
　　返事内容ファイルの格納場所：resources/RandomTalk.txt

【履歴】
5/27
■主な機能追加
・Twitter API検索
　仕様はざっくりと次の通り。
　・入力した文字列でツイートを検索
　・検索されたツイート最大１００件分のうち、アカウントのフレンド数上位５人のアカウントを抽出
　・ツイートの文字列数が短い順にソート
　・その５人のツイートに対して、直近（同日）のリプライを取得し、返却（上記ソート順に処理し、一つでも取れれば返却）
　【問題点】
　　・文章が１０文字以上だと、そんな都合のよいツイートはないので、ほぼ取れない
　　・１文字２文字で短すぎたり、ありきたりすぎると、
　　　検索数が多すぎて数分前のツイートばかりで、
　　　そんなに速攻リプライが付くことは少ないので、ほぼ取れない
■主な機能変更
・ルール判定順の変更
・前段のルールで話すことが決まれば、後半のルールは中断するよう変更。
　Twitterの検索回数が結構多く、時間が掛かるので（最大６回×検索インターバル１秒以上）。

5/14
■主な機能追加
・Google検索
　検索した結果のHTMLソースから、リンクのタイトルと内容の文字列を抽出し表示
　※3件の情報を取って表示してますが、
　　たまに2件とかになります。（文字列抽出バグですが、原因箇所不明）
　※Google Custom Search APIを使いたかったのですが、
　　無料版は1日100リクエストまでらしいので使ってません。
　例：マクド↓
　　�@リンク名：日本マクドナルド
　　　内容：日本マクドナルド公式ウェブサイトはお得な情報が満載！・・・

・Google予測変換
　Google Suggest APIを使って、検索キーワードの候補を表示
　例：マクド→マクドナルド, マクドナルド クーポン・・・

■主な機能変更
・直列処理から並列処理に変更
　通信が増えてきたので、性能向上のためスレッドを使うよう変更
　処理が終わった順、受信した順に結果を表示するようにしてます。
・プロンプトからの日本語入力対応
　UTF8に統一や、URLエンコード処理追加
・ランダムパターンの変更
　変な文字列が多かったので、
　ネットで有名な会話ネタにしてみました

5/11
■railsのやつから、主に追加した機能
1.Wikipedia検索から概要の表示
2.同じキーワードを３回以上話した場合の表示
3.会話の履歴をファイルに保存
　※終了キーワードを入れないと保存されません。

定型パターンの定義については、正規表現による定義は実装してません。
ただのカンマ区切り指定しかできないです。
判定は、完全一致→部分一致の順で判定します。

他は、そんなに変わってません。

